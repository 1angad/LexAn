#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAXTOK 1000
#define MAXLEN 50

typedef enum {
    ADD, SUB, MUL, DIV, MOD, LPAR, RPAR, ASSIGN, EQUALS, LTE, GTE, GT, LT, AND, OR, IDENTIFIER, INT_LITERAL, FLOAT_LITERAL, INVALID
} TokenType;

typedef struct {
    TokenType type;
    char lexeme[MAXLEN];
} Token;

char *keywords[] = {"and", "or"};

int is_key(char *lexeme) {
    for (int i = 0; i < sizeof(keywords) / sizeof(char *); i++) {
        if (strcmp(lexeme, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

int is_op(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '%' || c == '(' || c == ')' ||  c == '=' || c == '<' || c == '>' || c == '&' || c == '|';
}

TokenType get_op(char *lexeme) {
    if (strcmp(lexeme, "(") == 0) {
        return LPAR;
    } else if (strcmp(lexeme, ")") == 0) {
        return RPAR;
    } else if (strcmp(lexeme, "+") == 0) {
        return ADD;
    } else if (strcmp(lexeme, "-") == 0) {
        return SUB;
    } else if (strcmp(lexeme, "*") == 0) {
        return MUL;
    } else if (strcmp(lexeme, "/") == 0) {
        return DIV;
    } else if (strcmp(lexeme, "%") == 0) {
        return MOD;
    } else if (strcmp(lexeme, "=") == 0) {
        return ASSIGN;
    } else if (strcmp(lexeme, "==") == 0) {
        return EQUALS;
    } else if (strcmp(lexeme, "<=") == 0) {
        return LTE;
    } else if (strcmp(lexeme, ">=") == 0) {
        return GTE;
    } else if (strcmp(lexeme, "<") == 0) {
        return LT;
    } else if (strcmp(lexeme, ">") == 0) {
        return GT;
    } else if (strcmp(lexeme, "and") == 0) {
        return AND;
    } else if (strcmp(lexeme, "or") == 0) {
        return OR;
    } else {
        return INVALID;
    }
}

void tokenize(char *source_code, Token *tokens) {
    int toknum = 0;
    int pos = 0;
    int len = strlen(source_code);
    while (pos < len) {
        char c = source_code[pos];
        if (is_op(c)) {
            char lexeme[MAXLEN] = {0};
            lexeme[0] = c;
            pos++;
            if (c == '=' || c == '<' || c == '>' || c == '&') {
                if (source_code[pos] == c) {
                    lexeme[1] = c;
                    pos++;
            }
        }
        Token token;
        token.type = get_op(lexeme);
        strcpy(token.lexeme, lexeme);
        tokens[toknum++] = token;
    } else if (isdigit(c)) {
        int i = 0;
        char lexeme[MAXLEN] = {0};
        while (isdigit(c) || c == '.') {
            lexeme[i++] = c;
            pos++;
            c = source_code[pos];
        }
        Token token;
        if (strchr(lexeme, '.') != NULL) {
            token.type = FLOAT_LITERAL;
        } else {
            token.type = INT_LITERAL;
        }
        strcpy(token.lexeme, lexeme);
        tokens[toknum++] = token;
    } else if (isalpha(c) || c == '_') {
        int i = 0;
        char lexeme[MAXLEN] = {0};
        while (isalpha(c) || isdigit(c) || c == '_') {
            lexeme[i++] = c;
            pos++;
            c = source_code[pos];
        }
        Token token;
        if (is_key(lexeme)) {
            token.type = get_op(lexeme);
        } else {
            token.type = IDENTIFIER;
        }
        strcpy(token.lexeme, lexeme);
        tokens[toknum++] = token;
    } else if (isspace(c)) {
        pos++;
    } else {
        Token token;
        token.type = INVALID;
        token.lexeme[0] = c;
        tokens[toknum++] = token;
        pos++;
    }
}
Token end_token;
end_token.type = INVALID;
end_token.lexeme[0] = '\0';
tokens[toknum++] = end_token;
}

int main() {
    FILE *fp;
    char filename[MAXLEN];
    printf("Enter the name of the file containing the source code: ");
    scanf("%s", filename);
    fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Error: Unable to open file.\n");
        return 1;
    }
    char source_code[MAXTOK * MAXLEN];
    fread(source_code, sizeof(char), MAXTOK * MAXLEN, fp);
    fclose(fp);
    Token tokens[MAXTOK];
    tokenize(source_code, tokens);
    printf("Token list:\n");
    int i;
    //while(tokens.[i].type != INVALID)
    
    for (i = 0; tokens[i].type != INVALID; i++) {
        printf("Lexeme : %d --> id : %s\n", tokens[i].lexeme, tokens[i].type);
    }
    return 0;
}
 
